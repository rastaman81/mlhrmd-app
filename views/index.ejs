<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Date Query | <%= title %></title>
    <link rel="stylesheet" href="/styles.css" />
    <style>
      table {
        width: 100%;
        border-collapse: collapse;
      }
      th,
      td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
      }
      th {
        background-color: #f2f2f2;
      }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  </head>
  <body>
    <h1>Query Data by Date</h1>
    <form action="/date" method="POST">
      <input type="date" name="date" id="myDateInput" required />
      <button type="submit">Submit</button>
    </form>

    <% if (data && data.length > 0) { %>

    <select id="myDropdown">
      <% regions.forEach(region => { %>
      <option value="<%= region.sourcename %>"><%= region.sourcename %></option>
      <% }); %>
    </select>

    <h2>Results:</h2>
    <table id="dataTable">
      <thead>
        <tr>
          <th>REGION</th>
          <th>BRANCH</th>
          <th>BASIC PAY REGULAR</th>
          <th>BASIC PAY TRAINEE</th>
          <th>ALLOWANCES</th>
          <th>BM ALLOWANCE</th>
          <th>OT REGULAR</th>
          <th>OT TRAINEE</th>
          <th>COLA</th>
          <th>OTHER INCOME 1</th>
          <th>OTHER INCOME 2</th>
          <th>GRAVEYARD</th>
          <th>LATE REGULAR</th>
          <th>LATE TRAINEE</th>
          <th>LEAVE REGULAR</th>
          <th>LEAVE TRAINEE</th>
          <th>TOTAL DEDUCTION</th>
          <th>TOTAL NET</th>
        </tr>
      </thead>
      <tbody>
        <% data.forEach(item => { %>
        <tr>
          <td><%= item.region %></td>
          <td><%= item.branch %></td>
          <td>
            <%= item.basicRegular.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.basicTrainee.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.allowance.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.bmAllowance.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.otRegular.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.otTrainee.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
          <td><%= 0.00 %></td>
          <td>
            <%= item.incomeOne.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.incomeTwo.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.graveyard.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.lateRegular.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.lateTrainee.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.leaveRegular.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.leaveTrainee.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.totalDeduction.toLocaleString('en-US', {
            minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
          </td>
          <td>
            <%= item.totalNet.toLocaleString('en-US', { minimumFractionDigits:
            2, maximumFractionDigits: 2 }) %>
          </td>
        </tr>
        <% }) %>
      </tbody>
    </table>

    <button id="exportButton">Export to Excel</button>

    <% } else if (data && data.length === 0) { %>
    <h2>No results found for the selected date.</h2>
    <% } %> <% if (error) { %>
    <p style="color: red"><%= error %></p>
    <% } %>

    <script>
      // Convert the EJS `data` array to a JSON object and make it available to JavaScript
      const data = <%- JSON.stringify(data) %>;

      document
        .getElementById("exportButton")
        .addEventListener("click", function () {
          console.log("Button clicked!"); // Debugging line

          const selectedDate = "<%= date %>"; // Using the passed date variable

          var wb = XLSX.utils.book_new();

          // Group data by region
          const groupedData = {};
          data.forEach((item) => {
            if (!groupedData[item.region]) {
              groupedData[item.region] = [];
            }
            groupedData[item.region].push(item);
          });

          // Create a sheet for each region
          Object.keys(groupedData).forEach((region) => {
            // Create a worksheet from the grouped data for the current region
            const ws_data = [
              [
                "REGION",
                "BRANCH",
                "BASIC PAY REGULAR",
                "BASIC PAY TRAINEE",
                "ALLOWANCES",
                "BM ALLOWANCE",
                "OT REGULAR",
                "OT TRAINEE",
                "COLA",
                "OTHER INCOME 1",
                "OTHER INCOME 2",
                "GRAVEYARD",
                "LATE REGULAR",
                "LATE TRAINEE",
                "LEAVE REGULAR",
                "LEAVE TRAINEE",
                "TOTAL DEDUCTION",
                "TOTAL NET",
              ],
              ...groupedData[region].map(item => [
                item.region,
                item.branch,
                item.basicRegular,
                item.basicTrainee,
                item.allowance,
                item.bmAllowance,
                item.otRegular,
                item.otTrainee,
                0.00,
                item.incomeOne,
                item.incomeTwo,
                item.graveyard,
                item.lateRegular,
                item.lateTrainee,
                item.leaveRegular,
                item.leaveTrainee,
                item.totalDeduction,
                item.totalNet,
              ])
            ];

            var ws = XLSX.utils.aoa_to_sheet(ws_data);
            XLSX.utils.book_append_sheet(wb, ws, region);
          });

          // Write the Excel file with the formatted date in the filename
          XLSX.writeFile(wb, `Payroll_EDI_${selectedDate}.xlsx`);
        });
    </script>
  </body>
</html>
